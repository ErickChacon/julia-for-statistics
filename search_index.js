var documenterSearchIndex = {"docs":
[{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"EditURL = \"../../scripts/08-arrays.jl\"","category":"page"},{"location":"08-arrays/#Arrays","page":"Arrays","title":"Arrays","text":"","category":"section"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"An array is a multi-dimensional collection of objects. The elements of arrays do not need to be numbers or even from the same type. However, we are interested in numeric arrays.","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"using LinearAlgebra","category":"page"},{"location":"08-arrays/#Basic-syntax","page":"Arrays","title":"Basic syntax","text":"","category":"section"},{"location":"08-arrays/#Vectors","page":"Arrays","title":"Vectors","text":"","category":"section"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"x = [1, 3, 4]","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"Julia allows to perform operations that are almost globally accepted on vectors. For example, let's get the transpose:","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"x'","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"Or multiply the vector by an scalar:","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"4x","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"In cases where the operator is not clear, we need to use the dot operator to make element-by-element computations:","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"1 .+ x","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"sqrt.(x)","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"The dot operator is atuomatically available for any function:","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"g(x) = 3 + 2x^2","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"g.(x)","category":"page"},{"location":"08-arrays/#Matrices","page":"Arrays","title":"Matrices","text":"","category":"section"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"A = [1 4 5;\n    3 4 5]","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"5A","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"5 .+ A","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"A * x","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"A .^ 2","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"g.(A)","category":"page"},{"location":"08-arrays/#Constructors","page":"Arrays","title":"Constructors","text":"","category":"section"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"zeros(5, 3)","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"ones(5, 3)","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"rand(5, 3)","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"randn(5, 3)","category":"page"},{"location":"08-arrays/","page":"Arrays","title":"Arrays","text":"ones(5, 5) + I","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"EditURL = \"../../scripts/01-basic-concepts.jl\"","category":"page"},{"location":"01-basic-concepts/#Basic-concepts","page":"Basic concepts","title":"Basic concepts","text":"","category":"section"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"Values: Julia can work with different type of values like numbers, characters,","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"strings, so on. Below, we see an example of an string, numeric and complex value.","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"\"Hello\"","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"2021","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"2 + 1im","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"Variables: A value can be assigned to a variable using the equality symbol =.","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"Below, the variable greet is defined with the assigned value \"Hello\".","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"greet = \"Hello\"","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"Functions: A function is a mapping from a set of argument values to a return","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"value. There are different ways for defining a function. One common way is to start with the function key followed by the name of the function with braces, and it finish with the end key. The output value can be explicitly defined using the return key. See an example below.","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"function greet_name(x)\n    out = \"Hello, \"  * x\n    return out\nend","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"greet_name(\"Julia\")","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"Printing: The most common function to print a text is print, while println has","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"the same behaviour but adds a newline at the end. We can use $ to interpolate the value of a variable. You can use braces for expressions (e.g. $(1 + 1)). In the example below, variables who and greet are interpolated in the printed text.","category":"page"},{"location":"01-basic-concepts/","page":"Basic concepts","title":"Basic concepts","text":"who = \"Erick\"\ngreet = \"Hello\"\nprintln(\"Welcome! $greet, $(who)!\")","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"EditURL = \"../../scripts/02-common-values.jl\"","category":"page"},{"location":"02-common-values/#Common-values","page":"Common values","title":"Common values","text":"","category":"section"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"In this section, we provide a quick introduction to common basic objects. The function typeof used below returns the type of object provided as argument.","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Logical","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"true","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"false","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(true)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Integers","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"1","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(1)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Int8(1)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(Int8(1))","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Floating-Point numbers","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"10.0","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(10.0)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Float16(10.0)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(Float16(1))","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Complex numbers","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"1 + 2im","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(1 + 2im)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Rational numbers","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"10 // 15","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(10 // 15)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Character","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"'x'","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof('x')","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof('Î²')","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Strings","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"\"julia\"","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(\"julia\")","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Symbol: Object used to represent identifiers","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":":name","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(:name)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Tuples: Unmutable fixed-length container holding any values","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"(\"John\", 29, 10.0)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof((\"John\", 29, 10.0))","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Named tuples: Tuples with element names","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"(name = \"John\", age = 29, value = 10.0)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof((name = \"John\", age = 29, value = 10.0))","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Pair: Unmutable object with two elements (first and second)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"\"January\" => 1","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(\"January\" => 1)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Dictionaries: Table with keys and values.","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"Dict(\"Poisson\" => 1, \"Gaussian\" => 2)","category":"page"},{"location":"02-common-values/","page":"Common values","title":"Common values","text":"typeof(Dict(\"Poisson\" => 1, \"Gaussian\" => 2))","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"EditURL = \"../../scripts/04-variables.jl\"","category":"page"},{"location":"04-variables/#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"A variable is a name that will be associated to a value through a memory space; these are case-sensitive.","category":"page"},{"location":"04-variables/#Defining-variables","page":"Variables","title":"Defining variables","text":"","category":"section"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"Variables are defined and modified using =, see some examples below.","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"x = 10\nprint(x, \" is a \", typeof(x))","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"x = 10.0\nprint(x, \" is a \",  typeof(x))","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"x = \"Hello World!\"\nprint(x, \" is a \",  typeof(x))","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"x = 1 + 2im\nprint(x, \" is a \",  typeof(x))","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"x = 1 // 2\nprint(x, \" is a \",  typeof(x))","category":"page"},{"location":"04-variables/#Define-more-than-one-variable","page":"Variables","title":"Define more than one variable","text":"","category":"section"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"More that one variable can be defined using tuples syntax.","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"(a, b) = (1, 10)\nprint(a, \", \", b)","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"a, b = 1, 10\nprint(a, \", \", b)","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"(a, b) = 1, 10\nprint(a, \", \", b)","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"a, b = (1, 10)\nprint(a, \", \", b)","category":"page"},{"location":"04-variables/#Allowed-variable-names","page":"Variables","title":"Allowed variable names","text":"","category":"section"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"Unicode names can be used. This helps to write code closer to mathematical equations.","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"Î¼ = 0\nprint(Î¼)","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"ÏÂ² = 3\nprint(ÏÂ²)","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"Î± = 0.1\nprint(Î±)","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"Î²â = 10.0\nprint(Î²â)","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"Built-in constants or functions cannot be replaced after being used.","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"pi; pi = 3\n# ERROR: cannot assign a value to variable MathConstants.pi from module Main\n# Stacktrace:\n#  [1] top-level scope at REPL[95]:1","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"sqrt(4); sqrt = 4\n# ERROR: cannot assign a value to variable Base.sqrt from module Main\n# Stacktrace:\n#  [1] top-level scope at REPL[97]:1","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"Built-in keywords cannot be modify.","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"else = false\n# ERROR: syntax: unexpected \"else\"\n# Stacktrace:\n#  [1] top-level scope at none:1","category":"page"},{"location":"04-variables/#Type-declaration","page":"Variables","title":"Type declaration","text":"","category":"section"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"myvariable::Int8 = 10","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"myvariable = 3.3\n# ERROR: InexactError: Int8(3.3)","category":"page"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"myvariable = \"text\"\nERROR: MethodError: Cannot `convert` an object of type String to an object of type Int8","category":"page"},{"location":"04-variables/#Some-Julia-naming-conventions","page":"Variables","title":"Some Julia naming conventions","text":"","category":"section"},{"location":"04-variables/","page":"Variables","title":"Variables","text":"Use lower case for variables, functions, and macros (e.g. name = \"Julia\").\nUnderscore (_) use is discouraged (e.g. lastname = \"Montalvan\").\nUse uper camel case for Types and Modules.\nUse ! at the end of a function name when it mutates its arguments.","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"EditURL = \"../../scripts/20-dataframes.jl\"","category":"page"},{"location":"20-dataframes/#DataFrames","page":"DataFrames","title":"DataFrames","text":"","category":"section"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"Julia has a general representation for Tables with different implementations. The most used package is DataFrames.jl. It takes advantage of Julia syntax to define certain operation.","category":"page"},{"location":"20-dataframes/#Define-a-DataFrame","page":"DataFrames","title":"Define a DataFrame","text":"","category":"section"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"using DataFrames\n\nn = 100\ndata = DataFrame(id = 1:n, x = rand(n), y = randn(n))","category":"page"},{"location":"20-dataframes/#Subsetting","page":"DataFrames","title":"Subsetting","text":"","category":"section"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"Let's select a column without doing a copy:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"data.id","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"data[!, :id]","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"Modifications on these columns will be reflected in the original data.","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"xaux = data.x","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"xaux[1] = 100","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"first(data, 2)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"A copy of a column is created as folows:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"xaux = data[:, :x]","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"xaux[1] = 10","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"first(data, 2)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"More specific subsetting can be done with:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"data.id[1:10]","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"data.id[90:end]","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"data[1:10, 1:2]","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"You can also create a view that references to you DataFrame:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"subdata = view(data, 1:10, 1:3)\nsubdata.x[1] = rand()\nfirst(data, 2)","category":"page"},{"location":"20-dataframes/#Transform-variables","page":"DataFrames","title":"Transform variables","text":"","category":"section"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"To perform operations over columns, we use the Pair syntax:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"transform(data, :x => (z -> z .^ 2))","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"typeof(:x => (z -> z .^ 2))","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"We can explicitly provide the output name:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"transform(data, :x => (z -> z .^ 2) => :x2)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"We can also vectorize any function with ByRow:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"transform(data, :x => ByRow(sqrt))","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"Notice that the previous operations did not modify the original dataset. You can modify your original dataset using the in-place function transform!:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"transform!(data, :x => (z -> z .^ 2) => :x2)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"data","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"The function select works in a similar way, but only includes the desired variables:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"select(data, :x => (z -> z .^ 2) => :x2)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"select(data, :x, :y)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"typeof(r\"^x\")","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"select(data, r\"^x\")","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"Let's add new columns:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"insertcols!(data, :z => rand(100))","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"first(data, 5)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"Let's remove columns:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"select!(data, Not(:x2))","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"first(data, 5)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"Another simple operation is to rename columns:","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"rename(data, :x => :xnew, :z => :znew)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"rename(data, [:x, :z] .=> [:xnew, :znew])","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"rename(var -> var * \"_new\", data)","category":"page"},{"location":"20-dataframes/","page":"DataFrames","title":"DataFrames","text":"Remember to use rename! to actually make the changes on the original dataset.","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"EditURL = \"../../scripts/30-makie.jl\"","category":"page"},{"location":"30-makie/#Visualize-with-Makie","page":"Visualize with Makie","title":"Visualize with Makie","text":"","category":"section"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"In Julia, there are several packages for plotting. One of the prefered options is Makie.jl which is mainly written in Julia. There is also high-level packages written over Makie.jl to make coding easier: AlgebraOfGraphics.jl and TidierPlots.jl.","category":"page"},{"location":"30-makie/#Packages-and-data","page":"Visualize with Makie","title":"Packages and data","text":"","category":"section"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"using DataFrames\nusing CairoMakie\nusing AlgebraOfGraphics\n\ndf = DataFrame(id = 1:100, x = randn(100), y = randn(100))\nfirst(df, 5)","category":"page"},{"location":"30-makie/#Makie.jl","page":"Visualize with Makie","title":"Makie.jl","text":"","category":"section"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Let's start with a lines graph:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"fig = lines(df.x, df.y)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"You can add a geometry over this current graph:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"scatter!(df.x, df.y, color = :red)\nfig","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"To customize the graph we need to understand we have the following the componentes are:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Figure: Is the main container with custom attributes like backgroundcolor.\nAxis: Is the object where a geometry can be added and it is contained in a Figure.","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"fig = Figure(backgroundcolor = :tomato)\nAxis(fig[1,1], title = \"First figure\")\nscatter!(df.x, df.y, color = :red)\nAxis(fig[1,2], title = \"Second figure\")\nlines!(df.x, df.y, color = :blue)\nAxis(fig[2,1:2], title = \"Third figure\")\nscatter!(df.x, df.y, color = :red)\nlines!(df.x, df.y, color = :blue)\nfig","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Common arguments for the Axis elements are title, xlabel, ylabel.","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Now let's create a figure with legends:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"fig = scatter(df.x, df.y, color = :red, label = \"Normal(0,1)\")\nscatter!(rand(100), rand(100), color = :blue, label = \"Uniform(0,1)\")\naxislegend()\nfig","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"A figure with colorbar:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"X = rand(100, 80)\nfig, ax, hm = heatmap(X, colormap = Reverse(:RdBu))\nColorbar(fig[1,2], hm)\nfig","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"You can pass the Figure and Axis attributes to the plotting function:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"hist(df.x, color = (:orange, 0.7), strokewidth = 1,\n    axis = (title = \"Histogram\", xlabel = \"x\", ylabel = \"Ï(x)\"),\n    figure = (backgroundcolor = (:green, 0.6),)\n)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Check Makie.jl to find all available plots.","category":"page"},{"location":"30-makie/#Algebra-of-Graphics","page":"Visualize with Makie","title":"Algebra of Graphics","text":"","category":"section"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"In practice, Makie.jl is used for developers and custom plots for publication. We can use AlgebraOfGraphics.jl for a high level syntax.","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"df.group = rand(string.(1:4), 100)\nfirst(df, 5)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Let's see a basic graph using AlgebraOfGraphics.jl.","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = data(df) * mapping(:x, :y)\ndraw(g)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"You can use DataFrames.jl syntax to transform variables:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = data(df) * mapping(:x => (z -> 10z) => \"First variable\", :y => \"Second variable\")\ndraw(g)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"We can use another geometry with visual:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = data(df) * mapping(:x, :y) * visual(Lines, color = :red, linewidth = 3)\ndraw(g)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Notice that the order does not matter:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = mapping(:x, :y) * data(df) * visual(Lines, color = :red, linewidth = 3)\ndraw(g)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"We can use the + operator to combine graphs:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = data(df) * mapping(:x, :y, color = :group) * visual(Lines) +\n    data(df) * mapping(:x, :y) * visual(Scatter)\ndraw(g)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Why is it called AlgebraOfGraphics.jl?","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = data(df) * mapping(:x, :y, color = :group) *\n    (visual(Lines) + visual(Scatter))\ndraw(g)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"You can factorize any part:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"addnoise(x) = x + rand()\ng = data(df) *\n    (mapping(:x, :y, color = :group) + mapping(:x, :y => addnoise))\ndraw(g)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"Let's separating the plots by group:","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = data(df) * mapping(:x, :y, layout = :group, color = :group) *\n    (visual(Scatter) + visual(Lines))\nfig = draw(g)","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = data(df) * mapping(:x, :y, row = :group, color = :group) *\n    (visual(Scatter) + visual(Lines))\nfig = draw(g, axis = (width = 130, height = 130))","category":"page"},{"location":"30-makie/","page":"Visualize with Makie","title":"Visualize with Makie","text":"g = data(df) * mapping(:x, :y, col = :group, color = :group) *\n    (visual(Scatter) + visual(Lines))\nfig = draw(g, axis = (width = 130, height = 130))","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"EditURL = \"../../scripts/06-functions.jl\"","category":"page"},{"location":"06-functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"A function is an object mapping a tuple of arguments to a return value.","category":"page"},{"location":"06-functions/#Basic-syntax","page":"Functions","title":"Basic syntax","text":"","category":"section"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"A standard way of defining a function in julia is using a block with definition, body and return value.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function f(x, y)\n    z = x + y\n    return z\nend\nf(1, 3)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"When return is omited, the return value is the last evaluated expression.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function f(x, y)\n  x + y\nend\nf(1, 3)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"There is also an alternative syntax to define short functions that is quite similar to the definition of functions in mathematics.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"f(x, y) = x + y\nf(1, 3)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"It is possible to use unicode names.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"Ï(x, y) = x + y\nÏ(1, 3)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"Anonymous functions can also be defined using the syntax x -> x ^ 2, meaning that the function takes x and convert this to x ^ 2. This type of function is useful for functional programming. For example, to apply a particular function to a set of values using the map function.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"map(x -> 2x - 1, [1, 3, -1])","category":"page"},{"location":"06-functions/#Return-values","page":"Functions","title":"Return values","text":"","category":"section"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"We can define the output type of the function","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function g(x, y)::Int8\n    return x * y\nend\ntypeof(g(3, 2))","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"It is a convention to return nothing when the function does not need to return a value.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function printx(x)\n    println(\"x = $x\")\n    return nothing\nend\nprintx(10.0)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"Multiple values can be returned using tuple's syntax.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function maxmin(x, y)\n    return max(x, y), min(x, y)\nend","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"maxmin(2, 3.0)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"typeof(maxmin(2, 3.0))","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"a, b = maxmin(2, 3.0)","category":"page"},{"location":"06-functions/#Multiple-dispatching","page":"Functions","title":"Multiple dispatching","text":"","category":"section"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"A main feature of julia is multiple dispatching, meaning that it accepts multiple definitions of a function with different number of arguments, or different argument types. Then, the method called for evaluation will depend on the types of the arguments. Remember that :: is used to define the Type.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function concatenate(x::Int, y::String)\n    println(\"$x is an integer and $y is an string.\")\nend\nconcatenate(1, \"hola\")","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function concatenate(x::String, y::String)\n    x * y\nend\nconcatenate(\"Hola\", \"Erick\")","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"Try the following: concatenate(10,10). Can you guess what happens?","category":"page"},{"location":"06-functions/#Keyword-arguments","page":"Functions","title":"Keyword arguments","text":"","category":"section"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"Given that julia functions works with multiple dispatching, the order of the arguments is important. In situations where we need several arguments, it might become complicated to remember the order. For those cases, we can use keyword arguments such us the name of the argument is followed by the value. These keyword arguments can be included after the arguments using a ; as separation.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function myplot(x, y; color = \"black\", linewidth = 2)\n    #\nend\nmyplot(x, y; color = \"red\")","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"Functions with an indefinite number of keyword arguments can also be defined.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function myplot(x, y; kwargs...)\n    plot(x, y; kwargs...)\nend\nmyplot(x, y; color = \"red\")","category":"page"},{"location":"06-functions/#Varargs-functions","page":"Functions","title":"Varargs functions","text":"","category":"section"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"Functions with a variable number of arguments.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"function bar(a, b, x...)\n    a, b, x\nend\nbar(1, 2)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"bar(1, 2, 3)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"bar(1, 2, 3, 4)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"A similar syntax can be used to splat the values of a collection.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"extra = (3, 4)\nbar(1, 2, extra...)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"x = [3, 4]\nbar(1, 2, x...)","category":"page"},{"location":"06-functions/#Function-composition-and-piping","page":"Functions","title":"Function composition and piping","text":"","category":"section"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"Julia can combine functions by composing with the operator â.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"x = (3, 6)\nsqrt(sum(x))","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"fun = sqrt â sum\nfun(x)","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"In the following example we create a function that reverse an \"string\", then obtain the first letter, and finally convert it to capital.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"lastletter = uppercase â first â reverse\nlastletter(\"julia\")","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"map(uppercase â first â reverse, (\"It\", \"is\", \"julia\"))","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"On the other hand, the pipe operator |> can be applied to use the output of a function as the input of another function.","category":"page"},{"location":"06-functions/","page":"Functions","title":"Functions","text":"x |> sum |> sqrt","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"EditURL = \"../../scripts/index.jl\"","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This tutorial covers the basic elements of the Julia programming language. Most of the topics are taken from the official Julia documentation, check it for more detailed information.","category":"page"},{"location":"#Get-started","page":"Introduction","title":"Get started","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The three main ways of using Julia are by writing commands directly in an interactive session, working with scripts, and working with notebooks. These are described below.","category":"page"},{"location":"#An-interactive-session","page":"Introduction","title":"An interactive session","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"You can start using Julia on an interactive session by running julia from the command line. Once it is opened, you can execute Julia commands:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"10 ^ 2","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The session can be closed using CTRL-D or typing exit() inside Julia session.","category":"page"},{"location":"#Scripts","page":"Introduction","title":"Scripts","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Julia scripts have extension *.jl. An script is just a file containing Julia commands. The script src/00-file.jl has the following commands:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"x = [1, 3]\nfor i in x\n    println(i)\nend","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We can evaluate this script using the function include.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"include(\"src/00-file.jl\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A custom script with optional arguments can also be evaluated non-interactively (on a terminal) providing the script name as a first argument to the julia command.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia script.jl arg1 arg2","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Note that the script name is passed to the global variable PROGRAM_FILE. Similarly, the arguments are passed to ARGS.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As an example the script src/00-script.jl prints the filename and the arguments provided.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"println(PROGRAM_FILE)\nfor x in ARGS\n    println(x)\nend","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We can execute it as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia src/00-script.jl 1 10 100","category":"page"},{"location":"#Notebooks","page":"Introduction","title":"Notebooks","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Notebooks are an interactive way to execute code, but also add formated markdown text. You are probably looking at this file as a notebook. In this course, we will mainly use notebooks given that it is easier for students to start up.","category":"page"}]
}
